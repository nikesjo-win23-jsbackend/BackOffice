@page "/users"
@using BackOffice.Data
@inject HttpClient Http
@attribute [StreamRendering]

<PageTitle>Users</PageTitle>

<h1>Users</h1>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var user in users)
    {
        <div class="mb-3">@user.FirstName @user.LastName</div>
    }


@*     <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table> *@
}

@code {
    private ApplicationUser[]? users;

    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<ApplicationUser[]>("http://localhost:7256/api/GetUsers");
    }

    public class ApplicationUser
    {
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public object? Bio { get; set; }
        public string? ProfileImageUrl { get; set; }
        public object? AddressId { get; set; }
        public object? Address { get; set; }
        public string? Id { get; set; }
        public string? UserName { get; set; }
        public string? NormalizedUserName { get; set; }
        public string? Email { get; set; }
        public string? NormalizedEmail { get; set; }
        public bool EmailConfirmed { get; set; }
        public string? PasswordHash { get; set; }
        public string? SecurityStamp { get; set; }
        public string? ConcurrencyStamp { get; set; }
        public object? PhoneNumber { get; set; }
        public bool PhoneNumberConfirmed { get; set; }
        public bool TwoFactorEnabled { get; set; }
        public object? LockoutEnd { get; set; }
        public bool LockoutEnabled { get; set; }
        public int AccessFailedCount { get; set; }
    }
}
