@page "/courses"

@attribute [StreamRendering]
@attribute [Authorize]

<PageTitle>Courses</PageTitle>

<section class="courses">
    <div class="container">
        <div class="header-courses">
            <h1>Courses</h1>
            <NavLink class="btn-theme course-create-btn" href="/create-course">Create new course</NavLink>
        </div>
        
        <div class="courses-items">
            @if (courses != null)
            {
                foreach (var course in courses)
                {
                    <div class="course">
                        @if (course.IsBestseller)
                        {
                            <div class="best-seller">Best Seller</div>
                        }
                        <img src="images/courses/@course.ImageUri" alt="Image of @course.Title">
                        <div class="content" onclick="location.href='/courses/@course.Id'">
                            <h5>@course.Title</h5>
                            <p class="author">By @string.Join(", ", course.Authors!.Select(a => a.Name))</p>
                            @if (course.Prices != null)
                            {
                                <div class="pricing">
                                    @if (course.Prices.Discount > 0)
                                    {
                                        <p class="discount">
                                            @course.Prices.Currency @course.Prices.Discount
                                            <span class="discount-enabled">@course.Prices.Currency @course.Prices.Price</span>
                                        </p>
                                    }
                                    else
                                    {
                                        <p class="original">@course.Prices.Currency @course.Prices.Price</p>
                                    }
                                </div>
                            }
                            <div class="footer">
                                <div class="hours">
                                    <i class="fa-regular fa-clock"></i>@course.Hours hours
                                </div>
                                <div class="likes">
                                    <i class="fa-regular fa-thumbs-up"></i>@course.LikesInProcent (@course.Likes)
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div>Loading...</div>
            }
        </div>
        <div class="pagination">
            <i class="fa-solid fa-less-than"></i>
            <a class="number active" href="/courses">1</a>
            <a class="number" href="/courses">2</a>
            <a class="number" href="/courses">3</a>
            <i class="fa-solid fa-greater-than"></i>
        </div>
    </div>
</section>

@code {
    private List<CourseCardModel>? courses;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery
        {
            Query = @"
            query {
                getCourses {
                    id
                    imageUri
                    isBestseller
                    title
                    authors {
                        name
                    }
                    prices {
                        currency
                        price
                        discount
                    }
                    starRating
                    reviews
                    likesInProcent
                    likes
                    hours
                }
            }"
        };

        var response = await Http.PostAsJsonAsync("https://courseprovider-nikesjo.azurewebsites.net/api/graphql?code=E2an0F4ye5fmD9IGxflSEEA2A3PQsf23TSD8CNFm1n2FAzFuR2IXJg%3D%3D", query);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            if (result?.Data.TryGetProperty("getCourses", out var coursesJson) == true)
            {
                courses = coursesJson.EnumerateArray()
                    .Select(course => new CourseCardModel
                    {
                        Id = course.GetProperty("id").GetString()!,
                        IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
                        ImageUri = course.GetProperty("imageUri").GetString(),
                        Title = course.GetProperty("title").GetString(),
                        Authors = course.GetProperty("authors").EnumerateArray()
                                .Select(author => new AuthorCardModel
                                {
                                    Name = author.GetProperty("name").GetString()!,
                                }).ToList(),
                        Prices = new PricesCardModel
                        {
                            Currency = course.GetProperty("prices").GetProperty("currency").GetString(),
                            Price = course.GetProperty("prices").GetProperty("price").GetDecimal(),
                            Discount = course.GetProperty("prices").GetProperty("discount").GetDecimal()
                        },
                        StarRating = course.GetProperty("starRating").GetDecimal(),
                        Reviews = course.GetProperty("reviews").GetString(),
                        LikesInProcent = course.GetProperty("likesInProcent").GetString(),
                        Likes = course.GetProperty("likes").GetString(),
                        Hours = course.GetProperty("hours").GetString()
                    }).ToList();
            }
        }
    }
}